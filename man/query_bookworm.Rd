% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bookworm.R
\name{query_bookworm}
\alias{query_bookworm}
\title{Queries the Hathi Trust Bookworm Server at
https://bookworm.htrc.illinois.edu/develop/}
\usage{
query_bookworm(
  word,
  groups = "date_year",
  ignore_case = TRUE,
  counttype = "WordsPerMillion",
  method = c("return_json", "returnPossibleFields", "search_results"),
  lims = c(1920, 2000),
  compare_to,
  as_json = FALSE,
  ...
)
}
\arguments{
\item{word}{At least one term to get frequencies for. Can be a vector of
strings.}

\item{groups}{At least one category to group results by. The default is
\code{date_year}, which groups results by year.}

\item{ignore_case}{Default is \code{TRUE}, ignores case in search.}

\item{counttype}{The default is words per million, \code{counttype = "WordsPerMillion"}. According to the \href{https://bookworm-project.github.io/Docs/query_structure.html}{API documentation},
the following options are available:

\code{WordCount}: The number of words matching the terms in \code{search_limits} for
each group. (If no \code{words} key is specified, the sum of all the words in
the book).

\code{TextCount}: The number of texts matching the constraints on
\code{search_limits} for each group.

\code{WordsPerMillion}: The number of words in the \code{search_limits} per million
words in the broader set. (Words per million, rather than percent, gives a
more legible number).

\code{TextPercent}: The percentage of texts in the broader group matching the
search terms.

\code{TotalTexts}: The number of texts matching the constraints on
\code{compare_limits}. (By selecting \code{TextCount} and \code{TotalTexts}, you can
derive \code{TextPercent} locally, if you prefer).

\code{TotalWords}: The number of words in the larger set.

\code{WordsRatio}: equal to \code{WordCount/TotalWords}. Useful when \code{method = "search_results"}.

\code{SumWords}: equal to \code{TotalWords + WordCount}

\code{TextRatio}: equal to \code{TextCount/TotalTexts} Currently does not work. Will
throw an error in this version.

\code{SumTexts}: equal to \code{TextCount + TotalTexts} Currently does not work. Will
throw an error in this version.}

\item{method}{Type of results to return. Can be \code{return_json} (the default -
automatically converted to a proper \link{tibble} when possible; the JSON is
structured as "nested dicts for each grouping in \code{groups} pointing to an
array consisting of the results for each count in \code{counttype}", according
to the \href{https://bookworm-project.github.io/Docs/query_structure.html}{API documentation}.),
\code{returnPossibleFields} (metadata fields available to use in \code{groups}), and
\code{search_results} (a list of books and HathiTrust URLs matching a query).
Note that \code{search_results} has a limit of 100 books at the moment, randomly
selected. Notes:
\itemize{
\item When using \code{returnPossibleFields} all other fields are ignored.
\item When using \code{search_results} only the first 100 results are returned,
sorted by the percentage of hits in the text. That biases towards either
texts that use the words a lot, or texts that use it rarely. It is possible
to use \code{counttype = "WordsRatio"} to return a list sorted randomly,
weighted by the number of times the word appears in it. The \href{https://bookworm-project.github.io/Docs/query_structure.html}{API documentation}
notes that "this means that a random word from the first text should
represent a random usage from the overall sample. The current MySQL-python
implementation uses an approximation for this:
\code{LOG(1-RAND())/sum(main.count)} that should mimic a weighted random
ordering for most distributions, but in some cases it may not behave as
intended."
}}

\item{lims}{Min and max year as a two-element numeric vector. Default is
\code{c(1920, 2000)}.}

\item{compare_to}{A word to compare relative frequencies to. Currently this
is most useful with \code{counttype = "WordsRatio"}; this compares the relative
frequency of two words.}

\item{as_json}{Whether to return the raw json. Useful for complex queries
where the function does not know how to return a \link{tibble}, or when you want
to use the raw json to produce a different data structure.}

\item{...}{Additional parameters passed to the query builder; these would be
the fields that method = \code{returnPossibleFields} returns, including fields
to group the query by (e.g., groups = "class"). At the date of this
writing, these fields were: language, publication_country,
publication_state, subclass, narrow_class, class, resource_type,
target_audience, scanner, first_author_birth, first_author_name,
contributing_library, literary_form, cataloguing_source,
first_author_death, first_place, first_publisher, is_gov, subject_places,
date_year, and record_date_year. These are not documented, and in some
cases one must know the exact string to search for; for example, a search
with \code{first_author_name = "Tocqueville"} won't find anything, but a search
with \code{first_author_name = "Tocqueville, Alexis de 1805-1859."} may.}
}
\value{
A tidy \link{tibble} whenever possible, with columns for each grouping
parameter, the word (if any), and the counts and counttypes. For \code{method = "search_result"}, a workset that can be used in \link{browse_htids} and
\link{get_workset_meta}.
}
\description{
Retrieves word frequency data from the Hathi Trust Bookworm Server at
https://bookworm.htrc.illinois.edu/develop/, with options to group according
to various forms of metadata and to limit according to that same metadata.
This function uses code authored by Ben Schmidt
(from \url{https://github.com/bmschmidt/edinburgh/}).
}
\examples{
\dontrun{
result <- query_bookworm(word = c("democracy", "monarchy"), lims = c(1760, 2000),
  counttype = c("WordsPerMillion", "TextPercent"))

result2 <- query_bookworm(word = "democracy", groups = c("date_year", "class"), lims = c(1900,2000))

result4 <- query_bookworm(word = c("democracy"), lims = c(1760, 2000), counttype = c("TotalTexts"),
  language = "English")

result5 <- query_bookworm(word = "democracy", groups = "date_year", date_year = "1941",
  class = "Education", method = "search_results")
}
}
